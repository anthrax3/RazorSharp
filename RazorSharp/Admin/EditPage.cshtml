@using WebMatrix.Data;
@{
    Page.Title = "Admin :: Edit Page";
    Page.Heading = "Edit Page";

    var pId = Request["id"];
    var Message = string.Empty;
    dynamic Data = null;
    using (var Db = Database.Open(Functions.GetDBName()))
    {
        var SqlSelect = " Select * From Pages Where pId=@0";
        Data = Db.QuerySingle(SqlSelect, pId);
    }
    var pName = Data.pName;
    var pTitle = Data.pTitle;
    var pText = Data.pText;
    var mTitle = Data.mTitle;
    var mDescription = Data.mDescription;
    var mKeywords = Data.mKeywords;
    var pMasterPage = Data.pMasterPage;
    var pEditDate = Data.pEditDate;
    var pBody = Data.pBody;
    var pBodyFile = Data.pBodyFile;

    //Populate dropdowns
    var pLayouts = Functions.pageLayouts(pMasterPage);
    var pBodies = Functions.pageBodies(pBodyFile);
    var pBackups = Functions.pageBackups(pId);

    if (IsPost)
    {
        if (!Request["btnUpdate"].IsEmpty()){

            //create backup copy before update
            using (var Db = Database.Open(Functions.GetDBName()))
            {
                var SqlInsert = "Insert Into Backups (pwId, pwName, pwTitle, pwText, mTitle, mDescription, mKeywords, pMasterPage,pwDate, pBody, BType, pwFile) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11)";
                Db.Execute(SqlInsert, pId, pName, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, pBody, 'p', pBodyFile);
            }
            //update record
            pName = Request["pName"];
            pTitle = Request["pTitle"];
            pText = Request.Unvalidated("pText");
            mTitle = Request["mTitle"];
            mDescription = Request["mDescription"];
            mKeywords = Request["mKeywords"];
            pMasterPage = Request["pMasterPage"];
            pEditDate = DateTime.Now;
            pBody = false;
            pBodyFile = Request["pBodyFile"];
            if(Request["pBody"] == "on")
            {
                pBody = true;
            }
            try
            {
                using (var Db = Database.Open(Functions.GetDBName()))
                {
                    var SqlUpdate = "Update Pages Set pTitle=@0, pText=@1, mTitle=@2, mDescription=@3, mKeywords=@4, pMasterPage=@5, pEditdate=@6, pBody=@7, pBodyFile=@8 Where pId=@9";
                    Db.Execute(SqlUpdate, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, pBody, pBodyFile, pId);
                    Message = Helpers.alertSuccess("Page Successfully Saved!");
                }
            }
            catch (Exception ex)
            {
                Message = Helpers.alertDanger(ex.Message.ToString());
            }
        }
        else         {
            //from backup - load current version selected
            if (Request["Backup"].AsInt() ==0)
            {
                Response.Redirect("~/Admin/EditPage?id=" + pId);
            }
            //load from backup - post & btnUpdate is empty
            dynamic DataFromBackup = null;
            using (var Db = Database.Open(Functions.GetDBName()))
            {
                var SqlSelect = "Select * From Backups Where Id=@0";
                DataFromBackup = Db.QuerySingle(SqlSelect, Request["Backup"]);
            }
            pName = DataFromBackup.pwName;
            pTitle = DataFromBackup.pwTitle;
            pText = DataFromBackup.pwText;
            mTitle = DataFromBackup.mTitle;
            mDescription = DataFromBackup.mDescription;
            mKeywords = DataFromBackup.mKeywords;
            pMasterPage = DataFromBackup.pMasterPage;
            pEditDate = DataFromBackup.pwDate;
            pBody = DataFromBackup.pBody;
            pBodyFile = DataFromBackup.pwFile;
        }
    }
    //delete old backups, we want keep only top 5 backups per page/widget
    int NumberOfBackups = 0;
    using (var Db = Database.Open(Functions.GetDBName()))
    {
        var SqlSelect = "Select Count(*) From Backups Where bType='p' And pwID=@0";
        NumberOfBackups = (int)Db.QueryValue(SqlSelect, pId);
    }
    if (NumberOfBackups > 5)
    {
        int TopRecords = NumberOfBackups - 5;
        using (var Db = Database.Open(Functions.GetDBName()))
        {
            var SqlDelete = "Delete From Backups Where Id In (Select Top " + TopRecords + " Id From Backups Where bType='p' And pwID=@0 Order By Id Asc)";
            Db.Execute(SqlDelete, pId);
        }
    }
}
@section scripts {
<script type='text/javascript'>
    $(function(){
        $('#pText').summernote({ height: 400 });
    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $("#Backup").change(function () {
            $("#editPage").submit();
        });
    });
</script>
<script type='text/javascript'>
$(window).on('load', function() {
    $('form').validate({
        rules: {
            pName: {
                required: true
            },
            pMasterPage: {
                required: true
            }
        },
        highlight: function(element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
        },
        unhighlight: function(element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function(error, element) {
            if(element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        }
    });

});
</script>
}
@section menu{
    @RenderPage("_Menu.cshtml")
}
@Html.Raw(@Message)
<form action="" method="post" id="editPage">
    <div class="col-lg-12">
        <h2 class="page-header">Edit Page | <a href="@Href("~/Admin/WidgetsOnPage?pid=" + pId + "&pName=" + pName)">Widgets on Page</a> | <a href="@Href("~/Admin/AllPages")">All Pages</a> | <a href="@Href("~/Admin/NewPage")">Create Page</a></h2>
        <p>Use the form below to update the selected pages content & Meta information.<br />Should you require help for any of the fields, please hover over the <i class="glyphicon glyphicon-info-sign" title="Hover for help."></i> icon.</p>
        <p>Last Edited: @pEditDate</p>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.Label("Name", "pName", new { @class = "control-label" })
                <div class="input-group">
                    @Html.TextBox("pName", @pName, new { @readonly = "readonly", @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Name of the page. This cannot be changed."></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Layout", "pMasterPage", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("pMasterPage", pLayouts, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Layout/theme that site will use to render the page. All layouts are in Layouts folder - you can change/modify them to fit your needs"></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Title", "pTitle", new { @class = "control-label" })
                <div class="input-group">
                    @Html.TextBox("pTitle", @pTitle, new { @class = "form-control", @maxlength = "250" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Title of the page. Depending on template for body section (located in Templates\Body\ folder) it will or will not be visible to end user"></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Body Template", "pBody", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("pBodyFile", pBodies, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Template that will be used to render a body part of your page. All body templates are in Tempaltes/Body folder - you can add/change/modify them to fit your needs"></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Render Body", "pBody", new { @class = "control-label" })
                <div class="input-group" style="width:50px">
                    <span class="input-group-addon beautiful">
                        @Html.CheckBox("pBody", @pBody)
                    </span>
                    <span class="input-group-addon beautiful">
                        <i class="glyphicon glyphicon-info-sign" title="Should be selected for most of the pages, unless you need page that ONLY renders widgets in sections..."></i>
                    </span>
                </div>
            </div>

            </div>
            <div class="col-lg-12">
               @Html.TextArea("pText", @pText, new { @rows = "15", @cols = "80", @class = "form-control" })
            </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.Label("Page Backups", "Backup", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("Backup", pBackups, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Load content from backup. Every time you update widget/page site will create backup of that widget/page. By default last 5 version of widget/page are stored."></i></span>
                </div>
            </div>
            <p class="form-actions">
                <input type="submit" name="btnUpdate" value="Update Page" class="btn btn-primary" />
            </p>
        </div>
        </div>

        <div class="col-lg-12">
            <h2 class="page-header">Edit Meta Tags</h2>
            <div class="col-lg-6">
                <div class="form-group">
                    @Html.Label("Title", "mTitle", new { @class = "control-label" })
                    <div class="input-group">
                        @Html.TextBox("mTitle", @mTitle, new { @class = "form-control", @maxlength = "70" })
                        <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Meta tag: Title"></i></span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Description", "mDescription", new { @class = "control-label" })
                    <div class="input-group">
                        @Html.TextBox("mDescription", @mDescription, new { @class = "form-control", @maxlength = "200" })
                        <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Meta tag: Description"></i></span>
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Keywords", "mKeywords", new { @class = "control-label" })
                    <div class="input-group">
                        @Html.TextBox("mKeywords", @mKeywords, new { @class = "form-control", @maxlength = "200" })
                        <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Meta tag: keywords"></i></span>
                    </div>
                </div>
            </div>
        </div>
</form>