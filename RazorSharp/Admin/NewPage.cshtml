@using WebMatrix.Data;
@{
    Page.Title = "Admin :: Create Page";
    Page.Heading = "Create Page";
    var pName = "";
    var pTitle = "Page Title Here";
    var pText = "Text of the page";
    var mTitle = "Meta tag: Title";
    var mDescription = "Meta tag: Description";
    var mKeywords = "Meta tag: Keywords";
    var pMasterPage = "";
    var pEditDate = DateTime.Now;
    var pBody = true;
    var pBodyFile = "";
    var Message = string.Empty;
    var fromPage = Request["fromPage"];
    var pAuthor = User.Identity.Name;

    //populate dropdowns
    var pLayouts = Functions.pageLayouts("");
    var pBodies = Functions.pageBodies("");
    var pNames = Functions.pageNames(fromPage);

    Validation.RequireField("pName");
    Validation.RequireField("pMasterPage");

    pName = Request["pName"];
    pMasterPage = Request["pMasterPage"];
    pBodyFile = Request["pBodyFile"];

    if (IsPost && Validation.IsValid())
    {
        //clean pName - it is not passed as parameter.
        var pNameSQL = pName.ToString().Trim().Replace(" ","-");
        pNameSQL = pNameSQL.Replace("'", "").ToLower();

        if (!fromPage.IsEmpty())
        {
            using (var Db = Database.Open(Functions.GetDBName()))
            {
                //copy existing page
                var SqlInsertPage = "Insert Into Pages (pName, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, p.Author, pBody, pHTML, pBodyFile) Select '" + pNameSQL + "' As pName, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, pAuthor, pBody, pHTML, pBodyFile FROM  Pages As Pages_1 Where (pName = @0)";
                Db.Execute(SqlInsertPage, fromPage);
                var copyId = Db.GetLastInsertId();

                //copy widget
                var SqlInsertWidgets = "Insert Into PageWidget (sName, wOrderId, wId, pId) Select sName,WOrderId, wId, " + copyId + " From PageWidget pw Inner Join Pages p On pw.pID=p.pId Where p.pName=@0";
                Db.Execute(SqlInsertWidgets, fromPage);
                Response.Redirect("Editpage?id=" + copyId);
            }

        }
        else
        {
            try
            {
                using (var Db = Database.Open(Functions.GetDBName()))
                {
                    var sqlInsert = "Insert Into Pages (pName, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, pAuthor, pBody, pHTML, pBodyFile) Values (@0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11)";
                    Db.Execute(sqlInsert, pNameSQL, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pEditDate, pAuthor, pBody, 1, pBodyFile);
                    Response.Redirect("Editpage?id=" + Db.GetLastInsertId());
                }
            }
            catch (Exception ex)
            {
                Message = Helpers.alertDanger(ex.Message.ToString());
            }
        }
    }
}
@section Scripts{
<script type='text/javascript'>
$(window).on('load', function() {
    $('form').validate({
        rules: {
            pName: {
                required: true
            },
            pMasterPage: {
                required: true
            }
        },
        highlight: function(element) {
            $(element).closest('.form-group').removeClass('has-success').addClass('has-error');
        },
        unhighlight: function(element) {
            $(element).closest('.form-group').removeClass('has-error').addClass('has-success');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function(error, element) {
            if(element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        }
    });

});
</script>
}
@section Menu{
    @RenderPage("_Menu.cshtml")
}
@Html.Raw(Message)
<form method="post" action="" role="form">
    <div class="col-lg-12">
        <h2 class="page-header"><a href="@Href("~/Admin/AllPages")">All Pages</a> | Create Page</h2>
        <p>Use the form below to add a new page to the site. Once added you will need to link it to the <a href="@Href("~/Admin/Menu")">menu</a><br />Should you require help for any of the fields, please hover over the <i class="glyphicon glyphicon-info-sign" title="Hover for help."></i> icon.</p>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.Label("Name", "pName", new { @class = "control-label" })
                <div class="input-group">
                    @Html.TextBox("pName", Request["pName"], new { @maxlength = "100", @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="The name of the page eg about-us"></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Select Layout", "pMasterPage", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("pMasterPage", pLayouts, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Select layout/theme for new page. All layouts are in Layouts folder."></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Body Template", "pBodyFile", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("pBodyFile", pBodies, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="Template that will be used to render the body part of your page. All body templates are in Templates/Body folder."></i></span>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Or Use Existing Page", "fromPage", new { @class = "control-label" })
                <div class="input-group">
                    @Html.DropDownList("fromPage", pNames, new { @class = "form-control" })
                    <span class="input-group-addon"><i class="glyphicon glyphicon-info-sign" title="You can create new page based on existing one. All content, meta tags, widgets will be copied to new page."></i></span>
                </div>
            </div>

            <p class="form-actions">
                <input class="btn btn-primary" type="submit" value="Create Page" />
            </p>
        </div>
     </div>
</form>