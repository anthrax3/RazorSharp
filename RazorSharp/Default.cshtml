@{
    var pageName = Context.GetRouteValue("PageName") ?? "Default";
    dynamic data;
    using (var db = Database.Open(Functions.GetDbName()))
    {
        const string sqlselect = "SELECT pId, pName, pTitle, pText, mTitle, mDescription, mKeywords, pMasterPage, pBody, pBodyFile FROM Pages WHERE pName = @0 and pHTML=1";
        data = db.QuerySingle(sqlselect, pageName);
    }
    if (data == null)
    {
        throw new HttpException(404, "The requested page '" + pageName + "' was not found");
    }
    AnalyticsUtility.SaveVisitorInfo();
    Layout = "~/Layouts/"+ data.pMasterpage;
    Page.mTitle = data.mTitle;
    Page.mKeywords = data.mKeywords;
    Page.mDescription = data.mDescription;

    if (data.pBodyFile.StartsWith("addon_") && !Context.GetRouteValue("Par1").IsEmpty())
    {
        dynamic data1;
        using (var db = Database.Open(Functions.GetDbName()))
        {
            const string sqlselect = "SELECT mTitle, mDescription, mKeywords FROM Pages WHERE pName = @0 and pHTML=0";
            data1 = db.QuerySingle(sqlselect, Context.GetRouteValue("Par1"));
        }
        if (data1 != null)
        {
            Page.mTitle = data1.mTitle;
            Page.mKeywords = data1.mKeywords;
            Page.mDescription = data1.mDescription;
        }
    }
    dynamic widgets;
    using (var db = Database.Open(Functions.GetDbName()))
    {
        const string sqlselect = "Select PageWidget.pId, PageWidget.sName, PageWidget.wId, Widgets.wTitle, Widgets.wText, Widgets.wFile, Widgets.wName From PageWidget Inner Join Widgets On PageWidget.wId = Widgets.Id Where PageWidget.pId=@0 Order By sName, PageWidget.wOrderId Desc";
        widgets = db.Query(sqlselect, data.pId);
    }

}
@if (data.pBody){
    if (data.pBodyFile.StartsWith("_")){
      @RenderPage("~/Templates/Body/" + data.pBodyFile, data)
    }
    else
    {
        var addon = data.pBodyFile.ToString().Replace("addon_", "");
        addon = addon.Remove(addon.IndexOf("_"));
        @RenderPage("~/Addons/" + addon + "/Body/" + data.pBodyFile, data)
    }
}
@{
    var sn = "";
    foreach (var widget in widgets) {

        var sectionName = (string)widget.sName;
        var wFile = (string)widget.wFile;
        if(sn!=sectionName)
        {

            DefineSection(sectionName, () => {
                foreach (var row in widgets)
                {
                    if (row.sName != sectionName)
                    {
                        continue;
                    }
                    if (row.wFile.StartsWith("_"))
                    {
                        Write(RenderPage("~/Templates/" + row.wFile , row));
                    }
                    else
                    {
                        var addon = row.wFile.ToString().Replace("addon_", "");
                        addon = addon.Replace(".cshtml", "");
                        Write(RenderPage("~/Addons/" + addon +"/" + row.wFile, row));
                    }
                }

            });

        }
        sn = sectionName;
    }
}